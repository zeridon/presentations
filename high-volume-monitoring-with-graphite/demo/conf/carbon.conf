### Unified config file for all carbons
#   GRAPHITE_ROOT        - Root directory of the graphite installation.
#                          Defaults to ../
#   GRAPHITE_CONF_DIR    - Configuration directory (where this file lives).
#                          Defaults to $GRAPHITE_ROOT/conf/
#   GRAPHITE_STORAGE_DIR - Storage directory for whipser/rrd/log/pid files.
#                          Defaults to $GRAPHITE_ROOT/storage/
#
# To change other directory paths, add settings to this file. The following
# configuration variables are available with these default values:
#
#   STORAGE_DIR    = $GRAPHITE_STORAGE_DIR
#   LOCAL_DATA_DIR = STORAGE_DIR/whisper/
#   WHITELISTS_DIR = STORAGE_DIR/lists/
#   CONF_DIR       = STORAGE_DIR/conf/
#   LOG_DIR        = STORAGE_DIR/log/
#   PID_DIR        = STORAGE_DIR/
#
# For FHS style directory structures, use:
#
#   STORAGE_DIR    = /var/lib/carbon/
#   CONF_DIR       = /etc/carbon/
#   LOG_DIR        = /var/log/carbon/
#   PID_DIR        = /var/run/
#
#LOCAL_DATA_DIR = /opt/graphite/storage/whisper/

#GRAPHITE_ROOT = /opt/fh
#GRAPHITE_CONF_DIR = /opt/fh/relay-mid
#CONF_DIR = /opt/fh/relay-mid
#GRAPHITE_STORAGE_DIR = /opt/fh/relay-mid
#LOG_DIR = /opt/log
#PID_DIR = /opt/fh/relay-mid
#LOCAL_DATA_DIR = /opt/storage

# Enable daily log rotation. If disabled, carbon will automatically re-open
# the file if it's rotated out of place (e.g. by logrotate daemon)
#ENABLE_LOGROTATION = True

# Specify the user to drop privileges to
# If this is blank carbon runs as the user that invokes it
# This user must have write access to the local data directory
#USER =
#
# NOTE: The above settings must be set under [relay] and [aggregator]
#       to take effect for those daemons as well

[relay:top]
# filesystem organization
GRAPHITE_ROOT = /mnt/graphite
GRAPHITE_CONF_DIR = /mnt/graphite/config
CONF_DIR = /mnt/graphite/config
GRAPHITE_STORAGE_DIR = /mnt/run
PID_DIR = /mnt/run/graphite
LOG_DIR = /mnt/log/graphite
LOCAL_DATA_DIR = /mnt/graphite/storage
USER = graphite

# listeners
# echo ... | telnet
LINE_RECEIVER_INTERFACE = 0.0.0.0
LINE_RECEIVER_PORT = 10001
# programatic
PICKLE_RECEIVER_INTERFACE = 0.0.0.0
PICKLE_RECEIVER_PORT = 10101

#UDP Listener
ENABLE_UDP_LISTENER = True
UDP_RECEIVER_INTERFACE = 127.0.0.1
UDP_RECEIVER_PORT = 10001

# log connections?
LOG_LISTENER_CONNECTIONS = False

# how to relay: rules|consistent-hashing|aggregated-consistent-hashing
RELAY_METHOD = rules
REPLICATION_FACTOR = 1

# If using RELAY_METHOD = rules, all destinations used in relay-rules.conf
# must be defined in this list
# forwarding is to mid relays
DESTINATIONS = 172.20.20.20:6001, 172.20.20.21:6001

# tuning/queue/capacity
# This defines the maximum "message size" between carbon daemons.
# You shouldn't need to tune this unless you really know what you're doing.
MAX_DATAPOINTS_PER_MESSAGE = 500
MAX_QUEUE_SIZE = 10000
# This is the percentage that the queue must be empty before it will accept
# more messages.  For a larger site, if the queue is very large it makes sense
# to tune this to allow for incoming stats.  So if you have an average
# flow of 100k stats/minute, and a MAX_QUEUE_SIZE of 3,000,000, it makes sense
# to allow stats to start flowing when you've cleared the queue to 95% since
# you should have space to accommodate the next minute's worth of stats
# even before the relay incrementally clears more of the queue
QUEUE_LOW_WATERMARK_PCT = 0.8

# Set this to False to drop datapoints when any send queue (sending datapoints
# to a downstream carbon daemon) hits MAX_QUEUE_SIZE. If this is True (the
# default) then sockets over which metrics are received will temporarily stop accepting
# data until the send queues fall below QUEUE_LOW_WATERMARK_PCT * MAX_QUEUE_SIZE.
USE_FLOW_CONTROL = True

# Set this to True to enable whitelisting and blacklisting of metrics in
# CONF_DIR/whitelist and CONF_DIR/blacklist. If the whitelist is missing or
# empty, all metrics will pass through
# USE_WHITELIST = False

# By default, carbon itself will log statistics (such as a count,
# metricsReceived) with the top level prefix of 'carbon' at an interval of 60
# seconds. Set CARBON_METRIC_INTERVAL to 0 to disable instrumentation
CARBON_METRIC_PREFIX = carbon
CARBON_METRIC_INTERVAL = 60

[relay:mid]
GRAPHITE_ROOT = /mnt/graphite
GRAPHITE_CONF_DIR = /mnt/graphite/config
CONF_DIR = /mnt/graphite/config
GRAPHITE_STORAGE_DIR = /mnt/run
PID_DIR = /mnt/run/graphite
LOG_DIR = /mnt/log/graphite
LOCAL_DATA_DIR = /mnt/graphite/storage
USER = graphite

# listeners
# echo ... | telnet
LINE_RECEIVER_INTERFACE = 0.0.0.0
LINE_RECEIVER_PORT = 6000
# programatic
PICKLE_RECEIVER_INTERFACE = 0.0.0.0
PICKLE_RECEIVER_PORT = 6001

# log connections?
LOG_LISTENER_CONNECTIONS = False

# how to relay: rules|consistent-hashing|aggregated-consistent-hashing
RELAY_METHOD = consistent-hashing
REPLICATION_FACTOR = 1

# all destinations in the hashing scheme local caches
DESTINATIONS = localhost:6101:rewriter

# tuning/queue/capacity
# This defines the maximum "message size" between carbon daemons.
# You shouldn't need to tune this unless you really know what you're doing.
MAX_DATAPOINTS_PER_MESSAGE = 500
MAX_QUEUE_SIZE = 10000
# This is the percentage that the queue must be empty before it will accept
# more messages.  For a larger site, if the queue is very large it makes sense
# to tune this to allow for incoming stats.  So if you have an average
# flow of 100k stats/minute, and a MAX_QUEUE_SIZE of 3,000,000, it makes sense
# to allow stats to start flowing when you've cleared the queue to 95% since
# you should have space to accommodate the next minute's worth of stats
# even before the relay incrementally clears more of the queue
QUEUE_LOW_WATERMARK_PCT = 0.8

# Set this to False to drop datapoints when any send queue (sending datapoints
# to a downstream carbon daemon) hits MAX_QUEUE_SIZE. If this is True (the
# default) then sockets over which metrics are received will temporarily stop accepting
# data until the send queues fall below QUEUE_LOW_WATERMARK_PCT * MAX_QUEUE_SIZE.
USE_FLOW_CONTROL = True

# Set this to True to enable whitelisting and blacklisting of metrics in
# CONF_DIR/whitelist and CONF_DIR/blacklist. If the whitelist is missing or
# empty, all metrics will pass through
# USE_WHITELIST = False

# By default, carbon itself will log statistics (such as a count,
# metricsReceived) with the top level prefix of 'carbon' at an interval of 60
# seconds. Set CARBON_METRIC_INTERVAL to 0 to disable instrumentation
# CARBON_METRIC_PREFIX = carbon
# CARBON_METRIC_INTERVAL = 60

## aggreators
[aggregator:rewriter]
GRAPHITE_ROOT = /mnt/graphite
GRAPHITE_CONF_DIR = /mnt/graphite/config
CONF_DIR = /mnt/graphite/config
GRAPHITE_STORAGE_DIR = /mnt/run
PID_DIR = /mnt/run/graphite
LOG_DIR = /mnt/log/graphite
LOCAL_DATA_DIR = /mnt/graphite/storage
USER = graphite

# listeners
# echo ... | telnet
LINE_RECEIVER_INTERFACE = 0.0.0.0
LINE_RECEIVER_PORT = 6100
# programatic
PICKLE_RECEIVER_INTERFACE = 0.0.0.0
PICKLE_RECEIVER_PORT = 6101

AGGREGATION_RULES = aggregation-rules.conf
REWRITE_RULES = rewrite-rules.conf

# all destinations in the hashing scheme local caches
DESTINATIONS = localhost:2004:a, localhost:2104:b
REPLICATION_FACTOR = 1
FORWARD_ALL = True

# tuning/queue/capacity
# This defines the maximum "message size" between carbon daemons.
# You shouldn't need to tune this unless you really know what you're doing.
MAX_DATAPOINTS_PER_MESSAGE = 500
MAX_QUEUE_SIZE = 10000
# This is the percentage that the queue must be empty before it will accept
# more messages.  For a larger site, if the queue is very large it makes sense
# to tune this to allow for incoming stats.  So if you have an average
# flow of 100k stats/minute, and a MAX_QUEUE_SIZE of 3,000,000, it makes sense
# to allow stats to start flowing when you've cleared the queue to 95% since
# you should have space to accommodate the next minute's worth of stats
# even before the relay incrementally clears more of the queue
QUEUE_LOW_WATERMARK_PCT = 0.8

# Set this to False to drop datapoints when any send queue (sending datapoints
# to a downstream carbon daemon) hits MAX_QUEUE_SIZE. If this is True (the
# default) then sockets over which metrics are received will temporarily stop accepting
# data until the send queues fall below QUEUE_LOW_WATERMARK_PCT * MAX_QUEUE_SIZE.
USE_FLOW_CONTROL = True

# Set this to True to enable whitelisting and blacklisting of metrics in
# CONF_DIR/whitelist and CONF_DIR/blacklist. If the whitelist is missing or
# empty, all metrics will pass through
# USE_WHITELIST = False

# By default, carbon itself will log statistics (such as a count,
# metricsReceived) with the top level prefix of 'carbon' at an interval of 60
# seconds. Set CARBON_METRIC_INTERVAL to 0 to disable instrumentation
# CARBON_METRIC_PREFIX = carbon
# CARBON_METRIC_INTERVAL = 60

[cache:a]
GRAPHITE_ROOT = /mnt/graphite
GRAPHITE_CONF_DIR = /mnt/graphite/config
CONF_DIR = /mnt/graphite/config
GRAPHITE_STORAGE_DIR = /mnt/run
PID_DIR = /mnt/run/graphite
LOG_DIR = /mnt/log/graphite
LOCAL_DATA_DIR = /mnt/graphite/storage
USER = graphite

# cache / mem sizing
MAX_CACHE_SIZE = 200000
MAX_UPDATES_PER_SECOND = 500
MAX_UPDATES_PER_SECOND_ON_SHUTDOWN = 1000
MAX_CREATES_PER_MINUTE = 120
# WHISPER_SPARSE_CREATE = False
# delegate creation work to kernel (if available) falls back on posix calls
WHISPER_FALLOCATE_CREATE = True
# if running on shared disk and multiple caches write to same file
# WHISPER_LOCK_WRITES = False

# listeners
LINE_RECEIVER_INTERFACE = localhost
LINE_RECEIVER_PORT = 2003
ENABLE_UDP_LISTENER = False
UDP_RECEIVER_INTERFACE = localhost
UDP_RECEIVER_PORT = 2003
PICKLE_RECEIVER_INTERFACE = localhost
PICKLE_RECEIVER_PORT = 2004
# interface for bulk queries
CACHE_QUERY_INTERFACE = localhost
CACHE_QUERY_PORT = 2005

#some logging
LOG_LISTENER_CONNECTIONS = False
LOG_UPDATES = False
LOG_CACHE_HITS = False
LOG_CACHE_QUEUE_SORTS = False

# The thread that writes metrics to disk can use on of the following strategies
# determining the order in which metrics are removed from cache and flushed to
# disk. The default option preserves the same behavior as has been historically
# available in version 0.9.10.
#
# sorted - All metrics in the cache will be counted and an ordered list of
# them will be sorted according to the number of datapoints in the cache at the
# moment of the list's creation. Metrics will then be flushed from the cache to
# disk in that order.
#
# max - The writer thread will always pop and flush the metric from cache
# that has the most datapoints. This will give a strong flush preference to
# frequently updated metrics and will also reduce random file-io. Infrequently
# updated metrics may only ever be persisted to disk at daemon shutdown if
# there are a large number of metrics which receive very frequent updates OR if
# disk i/o is very slow.
#
# naive - Metrics will be flushed from the cache to disk in an unordered
# fashion. This strategy may be desirable in situations where the storage for
# whisper files is solid state, CPU resources are very limited or deference to
# the OS's i/o scheduler is expected to compensate for the random write
# pattern.
#
CACHE_WRITE_STRATEGY = sorted

# On some systems it is desirable for whisper to write synchronously.
# Set this option to True if you'd like to try this. Basically it will
# shift the onus of buffering writes from the kernel into carbon's cache.
WHISPER_AUTOFLUSH = False

# Set this to True to enable whitelisting and blacklisting of metrics in
# CONF_DIR/whitelist and CONF_DIR/blacklist. If the whitelist is missing or
# empty, all metrics will pass through
# USE_WHITELIST = False

# By default, carbon itself will log statistics (such as a count,
# metricsReceived) with the top level prefix of 'carbon' at an interval of 60
# seconds. Set CARBON_METRIC_INTERVAL to 0 to disable instrumentation
# CARBON_METRIC_PREFIX = carbon
# CARBON_METRIC_INTERVAL = 60

# Enable AMQP if you want to receve metrics using an amqp broker
# ENABLE_AMQP = False

# Verbose means a line will be logged for every metric received
# useful for testing
# AMQP_VERBOSE = False

# AMQP_HOST = localhost
# AMQP_PORT = 5672
# AMQP_VHOST = /
# AMQP_USER = guest
# AMQP_PASSWORD = guest
# AMQP_EXCHANGE = graphite
# AMQP_METRIC_NAME_IN_BODY = False
# Patterns for all of the metrics this machine will store. Read more at
# http://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol#Bindings
#
# Example: store all sales, linux servers, and utilization metrics
# BIND_PATTERNS = sales.#, servers.linux.#, #.utilization
#
# Example: store everything
# BIND_PATTERNS = #

[cache:b]
GRAPHITE_ROOT = /mnt/graphite
GRAPHITE_CONF_DIR = /mnt/graphite/config
CONF_DIR = /mnt/graphite/config
GRAPHITE_STORAGE_DIR = /mnt/run
PID_DIR = /mnt/run/graphite
LOG_DIR = /mnt/log/graphite
LOCAL_DATA_DIR = /mnt/graphite/storage
USER = graphite

# cache / mem sizing
MAX_CACHE_SIZE = 200000
MAX_UPDATES_PER_SECOND = 500
MAX_UPDATES_PER_SECOND_ON_SHUTDOWN = 1000
MAX_CREATES_PER_MINUTE = 120
# WHISPER_SPARSE_CREATE = False
# delegate creation work to kernel (if available) falls back on posix calls
WHISPER_FALLOCATE_CREATE = True
# if running on shared disk and multiple caches write to same file
# WHISPER_LOCK_WRITES = False

# listeners
LINE_RECEIVER_INTERFACE = localhost
LINE_RECEIVER_PORT = 2103
ENABLE_UDP_LISTENER = False
UDP_RECEIVER_INTERFACE = localhost
UDP_RECEIVER_PORT = 2103
PICKLE_RECEIVER_INTERFACE = localhost
PICKLE_RECEIVER_PORT = 2104
# interface for bulk queries
CACHE_QUERY_INTERFACE = localhost
CACHE_QUERY_PORT = 2105

#some logging
LOG_LISTENER_CONNECTIONS = False
LOG_UPDATES = False
LOG_CACHE_HITS = False
LOG_CACHE_QUEUE_SORTS = False

# The thread that writes metrics to disk can use on of the following strategies
# determining the order in which metrics are removed from cache and flushed to
# disk. The default option preserves the same behavior as has been historically
# available in version 0.9.10.
#
# sorted - All metrics in the cache will be counted and an ordered list of
# them will be sorted according to the number of datapoints in the cache at the
# moment of the list's creation. Metrics will then be flushed from the cache to
# disk in that order.
#
# max - The writer thread will always pop and flush the metric from cache
# that has the most datapoints. This will give a strong flush preference to
# frequently updated metrics and will also reduce random file-io. Infrequently
# updated metrics may only ever be persisted to disk at daemon shutdown if
# there are a large number of metrics which receive very frequent updates OR if
# disk i/o is very slow.
#
# naive - Metrics will be flushed from the cache to disk in an unordered
# fashion. This strategy may be desirable in situations where the storage for
# whisper files is solid state, CPU resources are very limited or deference to
# the OS's i/o scheduler is expected to compensate for the random write
# pattern.
#
CACHE_WRITE_STRATEGY = sorted

# On some systems it is desirable for whisper to write synchronously.
# Set this option to True if you'd like to try this. Basically it will
# shift the onus of buffering writes from the kernel into carbon's cache.
WHISPER_AUTOFLUSH = False

# Set this to True to enable whitelisting and blacklisting of metrics in
# CONF_DIR/whitelist and CONF_DIR/blacklist. If the whitelist is missing or
# empty, all metrics will pass through
# USE_WHITELIST = False

# By default, carbon itself will log statistics (such as a count,
# metricsReceived) with the top level prefix of 'carbon' at an interval of 60
# seconds. Set CARBON_METRIC_INTERVAL to 0 to disable instrumentation
# CARBON_METRIC_PREFIX = carbon
# CARBON_METRIC_INTERVAL = 60

# Enable AMQP if you want to receve metrics using an amqp broker
# ENABLE_AMQP = False

# Verbose means a line will be logged for every metric received
# useful for testing
# AMQP_VERBOSE = False

# AMQP_HOST = localhost
# AMQP_PORT = 5672
# AMQP_VHOST = /
# AMQP_USER = guest
# AMQP_PASSWORD = guest
# AMQP_EXCHANGE = graphite
# AMQP_METRIC_NAME_IN_BODY = False
# Patterns for all of the metrics this machine will store. Read more at
# http://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol#Bindings
#
# Example: store all sales, linux servers, and utilization metrics
# BIND_PATTERNS = sales.#, servers.linux.#, #.utilization
#
# Example: store everything
# BIND_PATTERNS = #


