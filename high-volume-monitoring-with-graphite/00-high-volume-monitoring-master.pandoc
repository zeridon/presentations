---
title: High Volume monitoring with Graphite
subtitle: Graphs Galore
author:
 - Владимир Витков
date: ДАТА / МЯСТО
titlepage-note: |
 Всеки бизнес има нужда от мониторинг. Всеки бизнес има нужда от гъвкав мониторинг който му позволява да си извади добри изводи. Днес ще ви разкажа как го постигнахме при нас.
...

## Кой е пред вас
 * Владимир
 * Системен Администратор
 * Привърженик на FOSS но не и зеалот
 * Експериментатор
 * Относително приятен човек за разговор\*

# Основи
Да положим основите

## Що е това мониторинг
 * Система/и които събират данни
 * Използва се от OPS
 * Използва се от бизнеса
 * използва се от мениджърите
 * Използва се за известяване

\note{
Мониторинг системите са необходимо зло. Без тях не знаем какво се случва в нашата система. С тях ... вече знаем че всичко е счупено и не добре.
Мониторинг системите се използват не само от администраторите и хората на смяна. Ползват се от бизнес мениджъри, от дирекни мениджъри, рекламисти, и кой ли още не.
Добрата мониторинг система се използва и за известяване.
}

## Защо ни трябва мониторинг
 * Без мониторинг сме слепи
 * Имаме ли капацитет
 * Държи ли се добре приложението ни
 * А имаме ли място
 * А колко плащаме за всичко
 * Има ли някой който ни атакува

\note{
Мониторинг системите имат множество приложения. Както за наблюдаване и проследяване на текущото състояние, така и за предсказване на бъдещо такова. Могат да бъдат много добър признак че нещо не е наред (някой ни атакува), да се позлват за изчисляване на сметки и още милиони неща.
}

## Какво е добър мониторинг
 * Там където ти трябва
 * Такъв който не ти пречи
 * Гъвкав за да може да се използва за различни цели
 * Лесен за ползване
 * Лесен за работа

\note{
Добрият мониторинг представлява ненатрапчива система която позволява свободна работа с нея. Позволява да бъде разширявана и не ти се пречка когато ти трябва. Гъвкав е от гледна точка на възможности и начини за употреба. И може би най важното удобен е както за системните администратори така и за не особенно запознатите хора.
}

## Що е това система за метрики
 * Част от мониторинг системите
 * Цифрово изражение на нещата
 * Централно място за предвиждания
 * ... и планиране
 * ... Следене на странности

\note{
Системите за метрики са необходими за да имаме цифрово изражение на нашата услуга. Основната им цел обикновенно е да се използват за планиране на бъдещо натоварване, анализ на текущото. Откриване на проблеми. ПРОДАЖБИ и какво ли още не.

Обикновенно системите за метрики са част от мониторинга, но могат да бъдат и отделни. Най-често се появяват като добавка към класическа система за мониторинг (нагиос) с цел да се събират и данни за производителността на системата. Могат също така да са интегрирани във самата система (какти) или просто да са нейна функционалност (какти).
}

## Трябват ли ни метрики
 * на кратко да
 * По нашироко
 	* Да разбира се
	* Освен ако нямаме дребен сайт с няколко посетителя дневно
	* ... и огромно количество хардуер да го движи
	* И тогава даже пак ни трябват

\note{
Метрики и мониторинг системи са винаги необходими. Няма как да минем без тях. Без значение колко малък или голям е бизнесът ни е абсолютно належащо да знаем неговото състояние. Било то прииходи и разходи, производителност, складова наличност или каквото се сетите
}

# Graphite

## Какво е Graphite
 * Йерархична система за събиране на метрики
 * Python
 * Бърза
 * Позволява използване за различни цели
 * Удобен интерфейс за експерименти
 * Фиксирано изискване на мястото*

\note{
Graphite e йерархична система за събиране на метрики. Написан е на питон. Може да бъде захранен с данни по различни начини. Доста бърза. С фиксирани изисквания за място (ако е помислено разумно). Има много удобен интерфейс за експерименти с вашите данни и е ужасно удобна при дизайн
}

## Защо Graphite
 * It's hip (nope)
 * It's fast and flexible (Hell yes)
 * Подкарва се бързо
 * Позволява много възможности

\note{
Избрали сме Graphite не защото е модерно а поради функционалността му
}

# The Plan

## Какво ще покажем
 * Събиране на данни от много машини
 * Обработка на данните
 * Методики за определяне структурата на метриките
 * Изграждане на надеждна система
 * Оптимизация на цялото нещо

\note{}

## Събиране на данни
 * POLL
 	* Центранел колектор(и)
	* Разпределени колектори
 * PUSH
 	* Разпределени или балансирани колектори
	* UDP is a friend

\note{
Има две основни архитектури. POLLP или ULL базирана при която колекторите на данните питат за тях. Това не е особенно скалируемо тъй като колекторите рано или късно се претоварват. Другият вариант е PUSH архитектура при която клиентите докладват данните. Обикновенно имаме няколко колектора скрити зад балансер който разпределя натоварването. По този начин много по лесно разпределя натоварването. Също така не забравявйте разликата в цената на TCP и UDP. Да при UDP може да имате загуби но печелите скорост. Ако това не е приемливо работете с TCP.
}

## Събиране на данни
 * APP и OS
 * Collectd (client)
 * Collectd (server)
 * Graphite (a few/lot)
 * Има и други варианти

\note{
В моя конкретен случай приложенията и ОС-a докладват данните си на локален collectd процес където подлежат на буфериране при желание. От там се изпращат на централизирания collectd сървър. Той от своя страна ги подава на серия от graphite процеси които ги обработват докато най-накрая се окажат върху дисковете. Това не е единственият и вероятно не е и най-добрият начин, така че почетете.
}

## Обработка на данните
 * Преименуване на данните
 * Агрегиране
 * Понижаване на точността (защо ли)
 * Други магии

\note{
След като получим данните може да ги подложим на обработа. Обработката в общия случай бива три вида. Преименуване на данните за да пасната на схемата на нашите метрики. Агрегиране на няколко метрики в една (сървъри). Понижаване на точността чрез усредняване на няколко поредни метрики. Основната цел на това усредняване (roll-up) е да се смести място. Отделно Graphite позволява дописване на функции с които може да се реализира каквото ви душа желае.
}

## Структуриране на метриките
 * Измислете си схема и я следвайте
 * <environment>.<application>.<instance>.<metric>.<dimension>
 * production.retriever.high-prio.pages.per-second
 * Не се страхувайте да задълбаете
 * Изисквайте унифицирани метрики (min, avg, max, persec)
 * Blacklist иWhitelist

\note{
Един от основните фактори за успеха/провала на тази ви система е структурирането на метриките ви. Подредете ги по начин който е удобен за вас и вашия бизнес. Ако приложение не може да ви даде метриките във вид който ви интересува помислете или да преименувате метриките от сървърна страна или да смените библиотеката/приложението. Не се страхувайте да нарушите схемата (поне в по ниските нива) ако това е смислено за случая. Настоявайте метрики да се генерират по определен начин и да се подават с определени имена (ще си спестите не малко главоболия). Не се притеснявайте да отхвърляте метрики.
}

## Изграждане на надеждна система
 * Много копия
 * Разпределено
 * Кешове
 * Възстановяване?
 * Тестове, тестове, тестове

\note{
За да бъде една система надеждна тя трябва да отговаря на няколко прости правила. Да може да се възстанови, да може да расте, и най-вече тези неща да се случват лесно. Основното в случая е да пазите повече от едно копие на данните си. Вярно може да са само метрики но си ги пазете. Организирайте разпределена система. Правете редовно тестове как се държи нещото при различни критични ситуации
}


