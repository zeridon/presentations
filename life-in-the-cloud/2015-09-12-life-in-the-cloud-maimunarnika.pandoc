---
title: Life in the Cloud
subtitle: Историите на системният администратор
author:
 - Владимир Витков
date: 2015.09.12 / Questers Beer'n'Code
titlepage-note: |
 Cloud услугите навлизат все повече и повече и всички твърдят че ще ви помогнат да си вършите по-бързо и по-ефективно работата. Че ще намалят разходите ви и ще увеличат безгранично капацитета.

 Дали е така или не ще определим накрая. А между временно ще покажем плюсове, минуси, грешки и голяма част от работата която Системният администратор ще не ще трябва да свърши за да се случат облачните неща. Ако имате чадър ... забравете го. В облака не вали, там е буря.
...

## Кой е пред вас
 * Владимир
 * Системен Администратор
 * Привърженик на FOSS но не и зеалот
 * Експериментатор
 * Относително приятен човек за разговор\*
\note{
За мен накратко
}

# Основи
Да положим основите

## Що е това Cloud
 * Хостинг - изберете си доставчик
 * Инфраструктура под наем (IaaS) - Amazon / Rackspace
 * Платформа под наем (PaaS) - Engine Yard / Heroku
 * Софтуер под наем (SaaS) - Office365 / Pingdom

\note{
Хостинг - класически познат като уеб хостинг. Ресурси за отдалечено ползване.

IaaS - виртуални машини с които може да правите каквото искате. Доста работа, държат се като обикновенни сървъри.

PaaS - платформа, която може да прави неща. Качвате си кода (с инструкции) и той работи.

SaaS - Приложения под наем.
}

## Къде и как се използва
 * Обработка на данни
 * Допълнителен капацитет
 * Намаляне на капиталовите разходи

\note{
Някои примери за употреба и стратегии за ефективно използване. Сезонни натоварвания са особенно добър пример.
}

## Предимства и недостатъци
 * Там е и е винаги наличен
 * Лесно се експериментира
 * Няма (голяма) нужда от Системен администратор
 - Като супермаркет е
 - Забравят се неща
 - Свързаността спира
 - Дори и в облака се случва да спре тока

\note{
Налично място за експерименти, винаги има място, винаги може повече.

Но се плаща и обикновенно няма големи гаранции за наличност (SLA). Проблем е че е като супермаркет. Ниски цени, голям избор и това сътветно води до големи сметки в различни моменти.

Зависите от всички доставчици по трасето а и не е нечувано да стане беля.
}

# The APP
Архитектурни основи

## Имаме идея
 * Единична машина
 * Всичко заедно

![app-idea](images/litc-app-idea-and-mock.png)

\note{
Блестяща идея, нахвърляне на гол скелет, разработване на тестово приложение. Всичко това се случва обикновенно на една машина (често на разработчика). В тази фаза обикновенно няма големи идеи и предвиждане на трафик и разпределена архитектура. Целият процес е насочен към the thing. Вашата добва и велика идея.
}

## Production Ready
![Prod Ready](images/litc-app-large-prod.png "Ready for production")

## Production Ready
 * Разделяне на компоненти
 * Web/App/DB

\note{
Приложението вече е голямо, изтествано и следва подготовка за нормална употреба. Разделят се отделните компоненти, избират се размери на машини, преценява се трафика и други.

Ползи от Cloud - лесна подмяна на размера, лесна промяна на броя машини

Обикновенно се ползва 3 tier архитектура с балансъри между нивата.
}

## Now the traffic comes
![evo](images/litc-app-evo-solution.png "Evolved solution")

## Now the traffic comes
 * Много Frontend-и
 * Много Application сървъри
 * Master/Slave(s) за базата
 - Oh \*BEEEP\* the traffic keeps comming

\note{
С нарастване на популярността се увеличава броят на машини, автоматизират се някои задачи. Идва момент в който трафика е неудържим и администраторите с рудиментарна автоматизация започват да изнемогват.

Започват да се мислят решения за автоматично скалиране на всяко ниво от архитектурата
}

# Проблеми и решения

## Прости компоненти
 * Тръгват по-бързо
 * Искат по-малко ресурси
 * По-Лесни са за управление
 * По-Лесно се търсят грешки в тях

\note{
Малките компоненти са по-пъргави, и по лесни за управление. Компонент за сваляне на файлове по адрес, компонент за местене по правила. Това че компонента е малък не значи че трябва да изпълнява само една дейност. Напълно нормално е да изпълнява няколко отделни дейности стига те да са логично организирани.
}

## Прости компоненти (2)
 - Зависят един от друг
 - Повече неща за управление
 - Повече усилие за съвместимост
 - Системата става трудна за управление

\note{
Но за сметка на това са по-голям брой и управлението им като цяло довежда до нови проблеми. Enter DevOps.
}

## Решения
 * Опашки
 * Твърди API-та
 * Developers, Developers, Developers
 * Кеширане

\note{
Рано или късно се стига до няколко стандартни решения.

Използване на малки компоненти, всеки компонент има твърдо дефинирано (и стабилно) API, използване на опашки за разделяне на компонентите и свободен растеж, кеширане, централизирано съхранение на параметри/конфигурации на системата и други.

Основни водещи трябва да са разработчиците, но това не винаги е така. Често се налага администратори с опит да насочват процеса.
}

# Живот в облака

## DO's
 * Никога не вярвайте на Sales/Marketing
 * Бекъпи
 * Стратегия за възстановяване (DR)
 * Не се заключвайте
 * Сървърът не е незаменим

\note{
Облакът е динамично животно без край.
Маркетинга винаги ще ви залива с информация която е не напълно вярна.
Никога ама никога никога не пропускайте архивните копия.
Измислете си и следвайте стратегия за бизнес стабилност и възстановяване (DR/BC).
Сървърите са евтини и ефимерни, не ги мислете прекалено.
}

## DO's (2)
 * Дискът може да изчезне\*
 * Имате си място за игра
 * SWAP considered harmfull\*
 * Test, Test, Test
 * Backup, Backup, Backup

\note{
Както и в реалните машини така и във виртуалните могат да имат проблеми, дисковете се чупят, и не са перманентни (освен ако не си ги направите такива).

Всеки един доставчик на клауд услуги има безплатни опции. Да ограничени са но ги има. Тествайте на тях. Ако имате локални дискове, ползвайте ги разумно.
}

## DONT's
 * Не разчитайте до безкрайност
 * Сървърите са бетон
 * Мрежата е супер ЯКА
 * Те си имат няколко захранвания
 * Не прекалявайте с дизайна

![large-system](images/litc-large-system.png "A large system")

\note{
Сървърите са ефимерни, и безкрайно ненадеждни. Във всяка една система има проблеми. Много и различни проблеми. Ако прекалявате с ранния дизайн ще имате проблеми. Процеса е винаги итеративен и няма смисъл да се втурвате от самото начало.
}

## DONT's (2)
 * Не забравяйте неизползвани ресурси
 * Липсващ мониторинг
 * Шумен мониторинг
 * Не следете всичко лично
 * Не игнорирайте възможностите които имате

\note{
Облака е готин, облака ни позволява да правим какво ли не, но не ни плаща сметките. По-точно прави ги големи ако сме невнимателни.

Мониторинг - без него не може, с него не става. Конфигурирайте го правилно за да си нямате проблеми.

Възползвайте се от всичко което ви дава облака, но не зависете от него. Измислете си процедури и начини да реализирате всичко и сами.
}

# Някои истории

## Аз само рестартирах машината
 * Без процедура
 * Без инструменти
 * На ръка
 * Без архиви
 * Проста билд машина (лесно)

## Искам статистики за 1 година
 * Статистика от 10TB логове
 * За вчера
 * Elastic Map Reduce
 * 24 hours data upload
 * 10 hours data parsing

## AWS Total Zone failure
 * Once upon a time there was AWS eu-west-1a
 * It is no more
 * Sleep ... for someone else
 * 12-24 hours for recovery

## AWS Power failure
 * Инцидент
 * 600 VM Dead
 * Mass watchdog failure and disconnect
 * Аварийно възстановяване на капацитет
 * Последващи проблеми с разчистването
 * Oh they are phoenixes (with no mind)

## AWS Network Failure
 * Хмм нещо прецъка
 * 200+ машини изчезнаха
 * Този път бяхме подготвени
 * 45 мин полуавтоматично възстановяване
 * Инфраструкрурни промени

## Blizzard Planning failure
 * 1 Mil players in 1 yer
 - Nope - 3 months
 - Reactive panic mode
 - Large scale production refactoring

## Parse 12 mil CV
 * Комерсиален Продукт
 * Perl/XML/C
 * Неоптимизирано, неконсистентно
 * Автоматизирано скалиране
 * Profit

## Кракване на пароли
 * g1/i1/hi1
 * Клъстер
 * Почти без пари
 * Elcomsoft
 * WPA Cracking

## Правене на пакети
 * As easy as a pie\*
 * Процедури
 * Автоматизация
 * wanna-build/buildd
 * Clean Room
 * Култура

## Тестове/Компилиране
 * Cloud is nice
 * 10 машини ще направят тестовете по-бързо
 * Jenkins/Hudson master + on demand slaves
 * Dev is happy
 * Accounting is happy
 * There are no builders (Yeah price is too high)

# Ресурси

## Благодарности
 * AWS
 * Линукс За Българи - http://www.linux-bg.org
 * Questers - https://www.questers.com
 * Някой който със сигурност съм забравил

## Връзки
 * Slides: http://is.gd/beerncode_slides
 * http://www.linux-bg.org
 * http://goo.gl/A6m8OC
 * https://aws.amazon.com/message/2329B7/
 * http://youtu.be/xyPzTywUBsQ

# Q/A

## Контакти
 * Владимир Витков
 * vvitkov@linux-bg.org
 * http://www.getoto.net/me/
